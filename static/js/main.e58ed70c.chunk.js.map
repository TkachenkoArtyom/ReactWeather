{"version":3,"sources":["components/Content/WeatherInfo/WeatherInfo.module.sass","components/Header/Header.module.sass","components/Content/FormData/FormData.module.sass","components/Header/Header.jsx","components/Content/FormData/FormData.jsx","services/api.js","components/Content/FormData/FormDataContainer.js","actions/weatherAction.js","components/Content/WeatherInfo/WeatherInfo.jsx","services/core.js","components/Content/WeatherInfo/WeatherInfoContainer.js","App.js","serviceWorker.js","reducer/rootReducer.js","store/store.js","index.js"],"names":["module","exports","Header","className","style","header","FormData","props","formDataContent","type","placeholder","onChange","handleChange","onClick","getWeatherInfo","apiGetWeather","appid","FormDataContainer","state","cityName","e","setState","target","value","axios","get","params","q","units","then","res","putWeatherData","data","weather","main","wind","catch","err","console","log","throwErr","this","Component","connect","status","dispatch","WeatherInfo","temp","tips","map","tip","i","key","greeting","greet","errors","dress","speed","weatherInfoContent","WeatherInfoContainer","App","Boolean","window","location","hostname","match","initState","rootReducer","action","newWeather","newMain","newWind","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e58ed70c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherInfoContent\":\"WeatherInfo_weatherInfoContent__-Fsau\",\"err\":\"WeatherInfo_err__Lscht\",\"tips\":\"WeatherInfo_tips__eTSqw\",\"dress\":\"WeatherInfo_dress__2Mdyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__e6Z7R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formDataContent\":\"FormData_formDataContent__3cb75\"};","import React from \"react\";\nimport style from \"./Header.module.sass\";\n\nconst Header = () => {\n    return (\n        <header className={style.header}>\n            <p>Прогноз погоды</p>\n        </header>\n    )\n};\n\nexport default Header;","import React from \"react\";\nimport style from \"./FormData.module.sass\";\n\nconst FormData = (props) => {\n\n    return (\n        <div className={style.formDataContent}>\n            <p><input type=\"text\" placeholder=\"Название города..\" onChange={props.handleChange}/></p>\n            <button onClick={props.getWeatherInfo}>Узнать погоду</button>\n        </div>\n    )\n};\n\nexport default FormData;","export const apiGetWeather = `https://api.openweathermap.org/data/2.5/weather`;\nexport const units = 'metric';\nexport const appid = '5ce78512a70c120ca1eeb0dac2f26106';","import React, {Component} from \"react\";\nimport {connect} from 'react-redux';\nimport FormData from \"./FormData\";\nimport axios from \"axios\";\nimport {apiGetWeather, appid, units} from \"../../../services/api\";\nimport {putWeatherData, throwErr} from \"../../../actions/weatherAction\";\n\nclass FormDataContainer extends Component {\n\n    state = {\n        cityName: ''\n    };\n\n    handleChange = (e) => {\n        this.setState({\n            cityName: e.target.value\n        });\n    };\n\n    getWeatherInfo = () => {\n        let cityName = this.state.cityName;\n        axios.get(apiGetWeather, {\n            params: {\n                q: cityName,\n                units,\n                appid\n            }\n        })\n            .then((res) => {\n                this.props.putWeatherData(res.data.weather, res.data.main, res.data.wind);\n            })\n            .catch((err) => {\n                console.log(err);\n                this.props.throwErr();\n            })\n    };\n\n    render() {\n        return (\n            <div>\n                <FormData handleChange={this.handleChange} getWeatherInfo={this.getWeatherInfo}\n                          weather={this.props.weather}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        status: state.status,\n        weather: state.weather,\n        main: state.main,\n        wind: state.wind\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        putWeatherData: (weather, main, wind) => {dispatch(putWeatherData(weather, main, wind))},\n        throwErr: () => {dispatch(throwErr())}\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDataContainer);","export const putWeatherData = (weather, main, wind) => {\n    return {\n        type: 'PUT_WEATHER_DATA',\n        weather,\n        main,\n        wind\n    }\n};\n\nexport const throwErr = () => {\n    return {\n        type: 'ERROR'\n    }\n};","import React from \"react\";\nimport style from \"./WeatherInfo.module.sass\";\nimport {simpleCore} from \"../../../services/core\";\n\nconst WeatherInfo = (props) => {\n    const tips = props.tips.map((tip, i) =>\n        <div key={i} className={style.tips}>\n            <p>{tip}</p>\n        </div>\n    );\n\n    const greeting = props.greeting.map((greet, i) =>\n        <div key={i}>\n            <p>{greet}</p>\n        </div>\n    );\n\n    const errors = props.errors.map((err, i) =>\n        <div key={i} className={style.err}>\n            <p>{err}</p>\n            {tips}\n        </div>\n    );\n\n    const weather = (\n        <div>\n            <span className={style.dress}><p>{simpleCore(props.main.temp)}</p></span>\n            <p>Температура по Цельсию - <b>{props.main.temp}</b></p>\n            <p>Скорость ветра - <b>{props.wind.speed}</b></p>\n            <p>На небе - <b>{props.weather[0].main}</b></p>\n        </div>\n    );\n\n    return (\n        <div className={style.weatherInfoContent}>\n            {props.status === 0 ? greeting : (props.status === 1 ? errors : weather)}\n        </div>\n    )\n};\n\nexport default WeatherInfo;","export const simpleCore = (temp) => {\n    if (temp < -10) {\n        return 'Очень холодно';\n    }\n    if (temp < 5 && temp >= -10) {\n        return 'Холодно';\n    }\n    if (temp >= 5 && temp < 15) {\n        return 'Прохладно';\n    }\n    if (temp >= 15 && temp < 25) {\n        return 'Тепло';\n    }\n    if (temp >= 25) {\n        return 'Жарко';\n    }\n};","import React, {Component} from \"react\";\nimport {connect} from 'react-redux';\nimport WeatherInfo from \"./WeatherInfo\";\n\nclass WeatherInfoContainer extends Component {\n\n    render() {\n        return (\n            <div>\n                <WeatherInfo weather={this.props.weather} main={this.props.main}\n                             wind={this.props.wind} status={this.props.status}\n                             tips={this.props.tips} errors={this.props.errors} greeting={this.props.greeting}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        status: state.status,\n        greeting: state.greeting,\n        tips: state.tips,\n        errors: state.errors,\n        weather: state.weather,\n        main: state.main,\n        wind: state.wind\n    }\n};\n\nexport default connect(mapStateToProps)(WeatherInfoContainer);","import React, {Component} from 'react';\nimport './App.sass';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport FormDataContainer from \"./components/Content/FormData/FormDataContainer\";\nimport WeatherInfoContainer from \"./components/Content/WeatherInfo/WeatherInfoContainer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className={'App'}>\n                    <Header/>\n                    <FormDataContainer/>\n                    <WeatherInfoContainer/>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a services worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our services worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a services worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // services worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a services ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register services worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous services worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during services worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the services worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure services worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No services worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    status: 0,\n    greeting: ['Введите название города на английском и нажмите кнопку)'],\n    tips: [\n        '- Напиши назваие города на английском',\n        '- Не указывай лишних пробелов или символов',\n        '- Вводите название только существующего города'\n    ],\n    errors: ['Что-то пошло не так, попробуй воспользоваться советами ниже:'],\n    weather: [\n        {\n            main: ''\n        }\n    ],\n    main: {\n        temp: ''\n    },\n    wind: {\n        speed: ''\n    }\n};\n\nconst rootReducer = (state = initState, action) => {\n\n    if (action.type === 'PUT_WEATHER_DATA') {\n        let newWeather = action.weather;\n        let newMain = action.main;\n        let newWind = action.wind;\n        return {\n            ...state,\n            status: 2,\n            weather: newWeather,\n            main: newMain,\n            wind: newWind\n        }\n    }\n    if (action.type === 'ERROR') {\n        return {\n            ...state,\n            status: 1\n        }\n    }\n    return state;\n};\n\nexport default rootReducer;","import {createStore} from \"redux\";\nimport rootReducer from \"../reducer/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}